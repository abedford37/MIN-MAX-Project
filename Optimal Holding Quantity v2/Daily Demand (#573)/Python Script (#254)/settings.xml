<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
    <entry key="node_file" type="xstring" value="settings.xml"/>
    <config key="flow_stack"/>
    <config key="internal_node_subsettings">
        <entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
    </config>
    <config key="model">
        <entry key="sourceCode" type="xstring" value="# Predicting Demand%%00010# Created by Ashley Bedford%%00010%%00010# This project will use actual demand across the past 10 weeks (Weeks -14 through -5) to predict the demand%%00010# of the past 4 weeks (Weeks -4 through -1) of demand for all of our products. In total a 14-week window is used, which%%00010# equates to a trailing Quarter. The XGBoost Model will keep track of historical data over time to improve prediction%%00010# results. We will use this on AA, A, and B items with at least 14 weeks of sales data available.%%00010%%00010import math%%00010%%00010import os.path%%00010import pickle%%00010import numpy as np%%00010import pandas as pd%%00010from numpy import asarray%%00010from pandas import concat%%00010from pandas import DataFrame%%00010%%00010%%00010# load the dataset%%00010%%00010# Import Sales Data%%00010df = pd.DataFrame(input_table_1.copy())%%00010%%00010df['-1'] = df['-1'].fillna(0)%%00010df['-2'] = df['-2'].fillna(0)%%00010df['-3'] = df['-3'].fillna(0)%%00010df['-4'] = df['-4'].fillna(0)%%00010df['-5'] = df['-5'].fillna(0)%%00010df['-6'] = df['-6'].fillna(0)%%00010df['-7'] = df['-7'].fillna(0)%%00010df['-8'] = df['-8'].fillna(0)%%00010df['-9'] = df['-9'].fillna(0)%%00010df['-10'] = df['-10'].fillna(0)%%00010df['-11'] = df['-11'].fillna(0)%%00010df['-12'] = df['-12'].fillna(0)%%00010df['-13'] = df['-13'].fillna(0)%%00010df['-14'] = df['-14'].fillna(0)%%00010%%00010%%00010%%00010%%00010for i in df.index:%%00010%%00010    group_name = ''%%00010%%00010    new_file_name = df.at[i,'Grouping']%%00010    new_file_name = new_file_name.replace('/', '_')%%00010    group_name = new_file_name + '.pkl'%%00010%%00010        %%00010    #Set the os path for accessing the models%%00010    path = flow_variables['knime.workspace'] + os.sep + group_name%%00010%%00010    if df.at[i,'date&amp;time diff'] == pd.np.nan:%%00010        continue%%00010%%00010    #Number of active complete weeks from today%%00010    weeks_active = df.at[i,'date&amp;time diff'].astype(np.int64)%%00010%%00010    if (weeks_active &lt;= 0) and (os.path.exists(path)):%%00010            %%00010        # pull the saved model and fit it%%00010        model = pickle.load(open(path, 'rb'))%%00010%%00010        for y in range(-14, 0):%%00010            y = str(y)%%00010            %%00010            if df.at[i,y] == 0:%%00010                df.at[i,y] = model.predict(df[y])[0]%%00010                            %%00010    if (weeks_active &gt; 0) and (os.path.exists(path)):%%00010            %%00010        # pull the saved model and fit it%%00010        model = pickle.load(open(path, 'rb'))%%00010%%00010        for y in range(-(weeks_active + 1), -15, -1):%%00010            y = str(y)%%00010            %%00010            if df.at[i,y] == 0:%%00010                df.at[i,y] = model.predict(df[y])[0]      %%00010%%00010%%00010output_table_1 = df.copy()"/>
        <entry key="rowLimit" type="xint" value="1000"/>
        <entry key="convertMissingToPython" type="xboolean" value="false"/>
        <entry key="convertMissingFromPython" type="xboolean" value="false"/>
        <entry key="sentinelOption" type="xstring" value="MIN_VAL"/>
        <entry key="sentinelValue" type="xint" value="0"/>
        <entry key="chunkSize" type="xint" value="500000"/>
        <entry key="pythonVersionOption" type="xstring" value="python3"/>
        <entry key="python2Command" type="xstring" value=""/>
        <entry key="python3Command" type="xstring" value=""/>
    </config>
    <config key="nodeAnnotation">
        <entry key="text" type="xstring" value="APPLY the XGBoost %%00013%%00010Forecast on the %%00013%%00010Table of Products"/>
        <entry key="bgcolor" type="xint" value="16777215"/>
        <entry key="x-coordinate" type="xint" value="3887"/>
        <entry key="y-coordinate" type="xint" value="1500"/>
        <entry key="width" type="xint" value="111"/>
        <entry key="height" type="xint" value="45"/>
        <entry key="alignment" type="xstring" value="CENTER"/>
        <entry key="borderSize" type="xint" value="0"/>
        <entry key="borderColor" type="xint" value="16777215"/>
        <entry key="defFontSize" type="xint" value="9"/>
        <entry key="annotation-version" type="xint" value="20151123"/>
        <config key="styles">
            <config key="style_0">
                <entry key="start" type="xint" value="0"/>
                <entry key="length" type="xint" value="5"/>
                <entry key="fontname" type="xstring" value="Arial"/>
                <entry key="fontstyle" type="xint" value="1"/>
                <entry key="fontsize" type="xint" value="9"/>
                <entry key="fgcolor" type="xint" value="10747904"/>
            </config>
            <config key="style_1">
                <entry key="start" type="xint" value="36"/>
                <entry key="length" type="xint" value="3"/>
                <entry key="fontname" type="xstring" value="Arial"/>
                <entry key="fontstyle" type="xint" value="0"/>
                <entry key="fontsize" type="xint" value="9"/>
                <entry key="fgcolor" type="xint" value="0"/>
            </config>
        </config>
    </config>
    <entry key="customDescription" type="xstring" isnull="true" value=""/>
    <entry key="state" type="xstring" value="IDLE"/>
    <entry key="factory" type="xstring" value="org.knime.python2.nodes.script2.Python2ScriptNodeFactory2"/>
    <entry key="node-name" type="xstring" value="Python Script"/>
    <entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
    <entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python2.nodes"/>
    <entry key="node-bundle-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-bundle-version" type="xstring" value="4.4.0.v202106250919"/>
    <entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
    <entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python2.feature.group"/>
    <entry key="node-feature-vendor" type="xstring" value="KNIME AG, Zurich, Switzerland"/>
    <entry key="node-feature-version" type="xstring" value="4.4.0.v202106250919"/>
    <config key="factory_settings"/>
    <config key="node_creation_config">
        <config key="Input object (pickled)"/>
        <config key="Input table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output table">
            <config key="port_0">
                <entry key="object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
            </config>
        </config>
        <config key="Output image"/>
        <config key="Output object (pickled)"/>
    </config>
    <entry key="name" type="xstring" value="Python Script"/>
    <entry key="hasContent" type="xboolean" value="false"/>
    <entry key="isInactive" type="xboolean" value="false"/>
    <config key="ports">
        <config key="port_1">
            <entry key="index" type="xint" value="1"/>
            <entry key="port_dir_location" type="xstring" isnull="true" value=""/>
        </config>
    </config>
    <config key="filestores">
        <entry key="file_store_location" type="xstring" isnull="true" value=""/>
        <entry key="file_store_id" type="xstring" isnull="true" value=""/>
    </config>
</config>
