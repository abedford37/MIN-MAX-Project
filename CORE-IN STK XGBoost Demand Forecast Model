# Predicting Demand for CORE and IN STK Items
# Created by Ashley Bedford

# This project predicts demand for the past 4 weeks (-4 through -1) using the previous 10 weeks (-14 through -5)
# of actual demand data for products. A total of 14 weeks are used, and XGBoost tracks historical data for improved predictions.

import os
import pickle
import numpy as np
import pandas as pd
from pandas import DataFrame, concat
from xgboost import XGBRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Function to transform a time series dataset into a supervised learning dataset
def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):
    df = DataFrame(data)
    cols = []
    # Input sequence (t-n, ... t-1)
    for i in range(n_in, 0, -1):
        cols.append(df.shift(i))
    # Forecast sequence (t, t+1, ... t+n)
    for i in range(0, n_out):
        cols.append(df.shift(-i))
    # Put it all together
    agg = concat(cols, axis=1)
    if dropnan:
        agg = agg.iloc[:, -3:]
        agg.dropna(inplace=True)
        agg = agg.iloc[:, [True, False, True]]
    return agg.values

# Walk-forward validation for univariate data
def walk_forward_validation(data, n_test, model_path):
    predictions = []
    train, test = data[:-n_test, :], data[-n_test:, :]
    history = [x for x in train]

    for i in range(len(test)):
        testX, testy = test[i, :-1], test[i, -1]
        yhat, model = xgboost_forecast(history, testX, model_path)
        predictions.append(yhat)
        history.append(test[i])

    error = mean_absolute_error(test[:, -1], predictions)
    return error, test[:, 1], predictions, model

# Fit the XGBoost model and make a one-step prediction
def xgboost_forecast(train, testX, model_path):
    train = np.asarray(train)
    trainX, trainy = train[:, :-1], train[:, -1]

    if os.path.exists(model_path):
        with open(model_path, 'rb') as model_file:
      
